"""
Django settings for scraper project.

Generated by 'django-admin startproject' using Django 5.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

import os
from datetime import timedelta
from pathlib import Path

from django.templatetags.static import static
from django.urls import reverse_lazy
from django.utils.translation import gettext_lazy as _
from dotenv import load_dotenv

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv("SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["*"]
# ALLOWED_HOSTS = ["192.168.1.102", "localhost", "127.0.0.1"]

SITE_ID = 1
# Application definition

CKEDITOR_UPLOAD_PATH = "uploads/"
CKEDITOR_IMAGE_BACKEND = "pillow"
CKEDITOR_UPLOAD_SLUGIFY_FILENAME = False


INSTALLED_APPS = [
    "unfold",
    "users",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "scraper",
    "corsheaders",
    "django_admin_listfilter_dropdown",
    "admin_auto_filters",
    "django_celery_results",
    "django_celery_beat",
    "django_extensions",
    "rest_framework",
    "django_filters",
    "rest_framework_simplejwt",
    "rest_framework.authtoken",
    "drf_yasg",
    "django_elasticsearch_dsl",
    "django_elasticsearch_dsl_drf",
    "ckeditor",
    "ckeditor_uploader",
    "django.forms",
    "mptt",
    "taggit",
    "news",
    "notifications",
    "celery_admin",
    "django.contrib.sites",
    "allauth",
    "allauth.account",
    "allauth.socialaccount",
    "allauth.socialaccount.providers.google",
    "search",
]

SOCIALACCOUNT_PROVIDERS = {
    "google": {"SCOPE": ["profile", "email"], "AUTH_PARAMS": {"access_type": "online"}}
}
MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "allauth.account.middleware.AccountMiddleware",
]

AUTHENTICATION_BACKENDS = (
    "django.contrib.auth.backends.ModelBackend",
    "allauth.account.auth_backends.AuthenticationBackend",
)
LOGIN_DIRECT_URL = "/"
LOGOUT_REDIRECT_URL = "/"

CORS_ALLOWED_ORIGINS = [
    "http://localhost:5173",
]

CORS_ALLOW_CREDENTIALS = True


ROOT_URLCONF = "core.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [os.path.join(BASE_DIR, "templates")],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "core.wsgi.application"

load_dotenv()

# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": os.getenv("DATABASE_NAME"),
        "USER": os.getenv("DATABASE_USER"),
        "PASSWORD": os.getenv("DATABASE_PASSWORD"),
        "HOST": os.getenv("DATABASE_HOST"),
        "PORT": os.getenv("DATABASE_PORT"),
        "OPTIONS": {
            "sslmode": "disable",
        },
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "Asia/Kathmandu"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = "/static/"
STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")
STATICFILES_DIRS = [
    BASE_DIR / "static",  # or os.path.join(BASE_DIR, "static")
]


# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"
MEDIA_ROOT = os.path.join(BASE_DIR, "media")
MEDIA_URL = "/media/"

# CELERY SETTINGS

CELERY_BROKER_URL = "redis://127.0.0.1:6379/0"
CELERY_RESULT_BACKEND = "django-db"
CELERY_TIME_ZONE = "Asia/Kathmandu"

CELERY_RESULT_EXTENDED = True

CELERY_BEAT_SCHEDULER = "django_celery_beat.schedulers:DatabaseScheduler"


# REST_FRAMEWORK = {
#     "DEFAULT_FILTER_BACKENDS": ("django_filters.rest_framework.DjangoFilterBackend",),
#     "DEFAULT_AUTHENTICATION_CLASSES": (
#         "rest_framework_simplejwt.authentication.JWTAuthentication",
#     ),
# }

# JWT settings

SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=5),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=1),
    "ROTATE_REFRESH_TOKENS": False,
}

# # Swagger setting
SWAGGER_SETTINGS = {
    "SECURITY_DEFINITIONS": {
        "Basic": {"type": "basic"},
        "Bearer": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header",
            "description": "Token-based authentication with required prefix `Bearer`. Example: `Bearer <your_token>`",
        },
    },
}

AUTH_USER_MODEL = "users.CustomUser"

# gmail
EMAIL_BACKEND = os.getenv("EMAIL_BACKEND")
EMAIL_HOST = os.getenv("EMAIL_HOST")
EMAIL_PORT = int(os.getenv("EMAIL_PORT", 587))
EMAIL_USE_TLS = os.getenv("EMAIL_USE_TLS", "True") == "True"
EMAIL_HOST_USER = os.getenv("EMAIL_HOST_USER")
EMAIL_HOST_PASSWORD = os.getenv("EMAIL_HOST_PASSWORD")
DEFAULT_FROM_EMAIL = os.getenv("DEFAULT_FROM_EMAIL")


# elastic-search
ELASTICSEARCH_HOST = {
    "default": {"hosts": "http://elasticsearch:9200", "verify_certs": False}
}

ELASTICSEARCH_DSL = {
    "default": {"hosts": "http://localhost:9200"},
}


# ckeditor
customColorPalette = [
    {"color": "hsl(4, 90%, 58%)", "label": "Red"},
    {"color": "hsl(340, 82%, 52%)", "label": "Pink"},
    {"color": "hsl(291, 64%, 42%)", "label": "Purple"},
    {"color": "hsl(262, 52%, 47%)", "label": "Deep Purple"},
    {"color": "hsl(231, 48%, 48%)", "label": "Indigo"},
    {"color": "hsl(207, 90%, 54%)", "label": "Blue"},
]

BASE_URL = "https://http://127.0.0.1:8000/"


CKEDITOR_BASEPATH = "/static/ckeditor/ckeditor/"
CKEDITOR_UPLOAD_PATH = "uploads/"
CKEDITOR_ALLOW_NONIMAGE_FILES = True
CKEDITOR_CONFIGS = {
    "default": {
        "skin": "moono",
        "toolbar_Basic": [["Source", "-", "Bold", "Italic"]],
        "removePlugins": "iframe",
        "allowedContent": True,
        "extraAllowedContent": "iframe[*]{*}(*) video[*]{*}(*); source[*]{*}(*)",
        "toolbar_YourCustomToolbarConfig": [
            {
                "name": "document",
                "items": [
                    "Source",
                    "-",
                    "Save",
                    "NewPage",
                    "Preview",
                    "-",
                ],
            },
            {
                "name": "clipboard",
                "items": [
                    "Cut",
                    "Copy",
                    "Paste",
                    "-",
                    "Undo",
                    "Redo",
                ],
            },
            {"name": "editing", "items": ["Find", "Replace", "-", "SelectAll"]},
            {
                "name": "basicstyles",
                "items": [
                    "Bold",
                    "Italic",
                    "Underline",
                    "Strike",
                    "Subscript",
                    "Superscript",
                    "-",
                ],
            },
            "/",
            {
                "name": "paragraph",
                "items": [
                    "NumberedList",
                    "BulletedList",
                    "-",
                    "Outdent",
                    "Indent",
                    "-",
                    "JustifyLeft",
                    "JustifyCenter",
                    "JustifyRight",
                    "JustifyBlock",
                    "-",
                ],
            },
            {"name": "links", "items": ["Link", "Unlink", "Anchor"]},
            {
                "name": "insert",
                "items": [
                    "Image",
                    "Table",
                    "HorizontalRule",
                    "Smiley",
                    "SpecialChar",
                    "PageBreak",
                    "Iframe",
                    "Youtube",
                    "Html5video",
                ],
            },
            {"name": "colors", "items": ["TextColor", "BGColor"]},
            "/",
            {"name": "styles", "items": ["Styles", "Format", "Font", "FontSize"]},
            {
                "name": "yourcustomtools",
                "items": [
                    "Preview",
                    "Maximize",
                ],
            },
        ],
        "toolbar": "YourCustomToolbarConfig",
        "toolbarGroups": [
            {"name": "document", "groups": ["mode", "document", "doctools"]}
        ],
        "height": 291,
        "width": "100%",
        "tabSpaces": 4,
        "extraPlugins": ",".join(
            [
                "uploadimage",
                "uploadfile",
                "uploadwidget",
                "filetools",
                "autolink",
                "widget",
                "autoembed",
                "embedsemantic",
                "clipboard",
                "autogrow",
                "widget",
                "lineutils",
                "clipboard",
                "dialog",
                "dialogui",
                "elementspath",
                "youtube",
                "html5video",
            ]
        ),
    }
}


# tags

TAGGIT_CASE_INSENSITIVE = True


def environment_callback(request):
    """
    Returns a list of two values: text and color type of the label
    displayed in top right corner of the admin.
    """
    return ["Production", "danger"]


def environment_title_prefix_callback(request):
    """
    Returns a prefix string for the environment label in the title tag.
    """
    return "Env:"


def dashboard_callback(request, context):
    """
    Prepare custom variables for admin index template (dashboard).
    """
    context.update(
        {
            "sample": "example",
        }
    )
    return context


def badge_callback(request):
    """
    Return badge count or any badge value for UI.
    """
    return 3


def permission_callback(request):
    """
    Return True/False if user has the permission to see certain items.
    """
    return request.user.has_perm("sample_app.change_model")


UNFOLD = {
    "SITE_TITLE": "News Portal",
    "SITE_HEADER": "My Admin Dashboard",
    "SITE_DROPDOWN": [
        {
            "icon": "diamond",
            "title": _("My site"),
            "link": "https://example.com",
        },
    ],
    "SITE_URL": "/",
    "SITE_ICON": {
        "light": lambda request: static("users/news.jpg"),
        "dark": lambda request: static("users/news.jpg"),
    },
    "SITE_LOGO": {
        "light": lambda request: static("users/news.jpg"),
        "dark": lambda request: static("users/news.jpg"),
    },
    "SITE_LOGO_SMALL": "users/news.jpg",
    "SITE_FAVICONS": [
        {
            "rel": "icon",
            "sizes": "32x32",
            "type": "image/svg+xml",
            "href": lambda request: static("users/news.jpg.png"),
        },
    ],
    "SHOW_HISTORY": True,
    "SHOW_VIEW_ON_SITE": True,
    "SHOW_BACK_BUTTON": False,
    "ENVIRONMENT": environment_callback,
    "ENVIRONMENT_TITLE_PREFIX": environment_title_prefix_callback,
    "DASHBOARD_CALLBACK": dashboard_callback,
    "THEME": "dark",
    "LOGIN": {
        "image": lambda request: static("sample/login-bg.jpg"),
        "redirect_after": lambda request: reverse_lazy("admin:index"),
    },
    "LOGOUT": {
        "redirect_after": lambda request: reverse_lazy("admin:index"),
    },
    "STYLES": [
        lambda request: static("css/style.css"),
    ],
    "SCRIPTS": [
        lambda request: static("js/script.js"),
    ],
    "BORDER_RADIUS": "6px",
    "COLORS": {
        "base": {
            "50": "249, 250, 251",
            "100": "243, 244, 246",
            "200": "229, 231, 235",
            "300": "209, 213, 219",
            "400": "156, 163, 175",
            "500": "107, 114, 128",
            "600": "75, 85, 99",
            "700": "55, 65, 81",
            "800": "31, 41, 55",
            "900": "17, 24, 39",
            "950": "3, 7, 18",
        },
        "primary": {
            "50": "250, 245, 255",
            "100": "243, 232, 255",
            "200": "233, 213, 255",
            "300": "216, 180, 254",
            "400": "192, 132, 252",
            "500": "168, 85, 247",
            "600": "147, 51, 234",
            "700": "126, 34, 206",
            "800": "107, 33, 168",
            "900": "88, 28, 135",
            "950": "59, 7, 100",
        },
        "font": {
            "subtle-light": "var(--color-base-500)",
            "subtle-dark": "var(--color-base-400)",
            "default-light": "var(--color-base-600)",
            "default-dark": "var(--color-base-300)",
            "important-light": "var(--color-base-900)",
            "important-dark": "var(--color-base-100)",
        },
    },
    "EXTENSIONS": {
        "modeltranslation": {
            "flags": {
                "en": "🇬🇧",
                "fr": "🇫🇷",
                "nl": "🇧🇪",
            },
        },
    },
    "SIDEBAR": {
        "show_search": False,
        "show_all_applications": False,
        "navigation": [
            {
                "title": _("Dashboard"),
                "separator": True,
                "items": [
                    {
                        "title": _("Dashboard"),
                        "icon": "dashboard",
                        "link": reverse_lazy("admin:index"),
                        "permission": lambda request: request.user.is_superuser,
                    },
                    {
                        "title": _("Support"),
                        "icon": "support",
                        "link": reverse_lazy("admin:users_support_changelist"),
                        "permission": lambda request: request.user.is_superuser,
                    },
                ],
            },
            {
                "title": _("Auth"),
                "separator": True,
                "collapsible": True,
                "items": [
                    {
                        "title": _("Users"),
                        "icon": "people",
                        "link": reverse_lazy("admin:users_customuser_changelist"),
                    },
                    {
                        "title": _("Groups"),
                        "icon": "groups",
                        "link": reverse_lazy("admin:auth_group_changelist"),
                    },
                ],
            },
            {
                "title": _("News"),
                "icon": "newspaper",
                "separator": True,
                "collapsible": True,
                "items": [
                    {
                        "title": _("Category"),
                        "icon": "folder",
                        "link": reverse_lazy("admin:news_category_changelist"),
                    },
                    {
                        "title": _("Create News"),
                        "icon": "article",
                        "link": reverse_lazy("admin:news_newspost_changelist"),
                    },
                    {
                        "title": _("Likes"),
                        "icon": "favorite",
                        "link": reverse_lazy("admin:news_like_changelist"),
                    },
                    {
                        "title": _("Tags"),
                        "icon": "label",
                        "link": reverse_lazy("admin:news_customtag_changelist"),
                    },
                    {
                        "title": _("Comments"),
                        "icon": "message",
                        "link": reverse_lazy("admin:news_comment_changelist"),
                    },
                    {
                        "title": _("Bookmark"),
                        "icon": "bookmark",
                        "link": reverse_lazy("admin:news_bookmark_changelist"),
                    },
                    {
                        "title": _("Notifications"),
                        "icon": "notifications",
                        "link": reverse_lazy(
                            "admin:notifications_notification_changelist"
                        ),
                    },
                ],
            },
            {
                "title": _("Stocks"),
                "icon": "bar_chart",
                "separator": True,
                "collapsible": True,
                "items": [
                    {
                        "title": _("Sector"),
                        "icon": "business",
                        "link": reverse_lazy("admin:scraper_sector_changelist"),
                    },
                    {
                        "title": _("Symbol"),
                        "icon": "emoji_symbols",
                        "link": reverse_lazy("admin:scraper_symbol_changelist"),
                    },
                    {
                        "title": _("Keyword"),
                        "icon": "label",
                        "link": reverse_lazy("admin:scraper_keyword_changelist"),
                    },
                    {
                        "title": _("StockNews URL"),
                        "icon": "link",
                        "link": reverse_lazy("admin:scraper_stocknewsurl_changelist"),
                    },
                    {
                        "title": _("StockNews URL Rule"),
                        "icon": "rule",
                        "link": reverse_lazy(
                            "admin:scraper_stocknewsurlrule_changelist"
                        ),
                    },
                    {
                        "title": _("News URL"),
                        "icon": "link",
                        "link": reverse_lazy("admin:scraper_newsurl_changelist"),
                    },
                    {
                        "title": _("News URL Rule"),
                        "icon": "rule",
                        "link": reverse_lazy("admin:scraper_newsurlrule_changelist"),
                    },
                    {
                        "title": _("Stock Record"),
                        "icon": "assessment",
                        "link": reverse_lazy("admin:scraper_stockrecord_changelist"),
                    },
                    {
                        "title": _("Announcement"),
                        "icon": "announcement",
                        "link": reverse_lazy("admin:scraper_announcement_changelist"),
                    },
                ],
            },
            {
                "title": _("Celery"),
                "icon": "schedule",
                "separator": True,
                "collapsible": True,
                "items": [
                    {
                        "title": _("Periodic Tasks"),
                        "icon": "event_repeat",
                        "link": reverse_lazy(
                            "admin:django_celery_beat_periodictask_changelist"
                        ),
                    },
                    {
                        "title": _("Crontabs"),
                        "icon": "schedule",
                        "link": reverse_lazy(
                            "admin:django_celery_beat_crontabschedule_changelist"
                        ),
                    },
                    {
                        "title": _("Intervals"),
                        "icon": "timer",
                        "link": reverse_lazy(
                            "admin:django_celery_beat_intervalschedule_changelist"
                        ),
                    },
                    {
                        "title": _("Clocked Tasks"),
                        "icon": "alarm",
                        "link": reverse_lazy(
                            "admin:django_celery_beat_clockedschedule_changelist"
                        ),
                    },
                    {
                        "title": _("Solar Schedules"),
                        "icon": "sunny",
                        "link": reverse_lazy(
                            "admin:django_celery_beat_solarschedule_changelist"
                        ),
                    },
                ],
            },
        ],
    },
}
